import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import xyz.wagyourtail.jvmdg.gradle.task.DowngradeJar
import xyz.wagyourtail.jvmdg.gradle.task.ShadeJar

plugins {
    id("java")
    alias(libs.plugins.jvmdowngrader)
    alias(libs.plugins.shadow)
    alias(libs.plugins.spotless) apply(false)
}

// --------------------------- Jar file helper method --------------------------------
ext.bundleJars = { Map<String, List<String>> platformVersions ->
    def jarFiles = [
            file("./common/build/libs/${project_id}-common-${version}-shaded.jar")
    ]
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            jarFiles.add(file("${platform}/build/libs/${project_id}-${platform}-${mcVersion}-${version}.jar") as File)
        }
    }
    def zipped = jarFiles.collect {
        zipTree(it)
    }
    return zipped
}

subprojects {
    apply(plugin: "java")
    apply(plugin: libs.plugins.spotless.get().pluginId)

    java.toolchain.languageVersion = JavaLanguageVersion.of(21)
    sourceCompatibility = 21
    targetCompatibility = 21

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    repositories {
        mavenLocal()
        mavenCentral()

        // NeuralNexus
        maven {
            name = "NeuralNexus"
            url = "https://maven.neuralnexus.dev/releases"
        }

        // NeuralNexus Mirror
        maven {
            name = "NeuralNexus Mirror"
            url = "https://maven.neuralnexus.dev/mirror"
        }

        // Minecraft
        maven {
            name = "minecraft-repo"
            url = "https://libraries.minecraft.net/"
        }
    }

    dependencies {
        compileOnly("org.jetbrains:annotations:24.1.0")
        compileOnly("org.spongepowered:mixin:0.8.5")
        compileOnly("dev.neuralnexus:conditional-mixins:0.1.1")
    }

    spotless {
        format "misc", {
            target "*.gradle", ".gitattributes", ".gitignore"

            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
        java {
            toggleOffOn()
            importOrder()
            removeUnusedImports()
            cleanthat()
            googleJavaFormat("1.17.0").aosp().formatJavadoc(true).reorderImports(true)
            formatAnnotations()
        }
    }

    tasks.assemble.dependsOn(spotlessApply)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
sourceCompatibility = targetCompatibility = 21

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

var platformVersions = [:]
platformVersions.put("bungee", Arrays.asList("1.20"))
platformVersions.put("velocity", Arrays.asList("3"))

tasks.register("buildAllTheStuffNowBcGradleIsDumb", Task) {
    dependsOn(":common:build")
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:build")
        }
    }
}

tasks.register("shadeAndRelocate", ShadowJar) {
    archiveFileName = "playtimeranks-${version}-mono.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(
                "Specification-Title"     : "${project_name}",
                "Specification-Version"   : version,
                "Specification-Vendor"    : "NeuralNexus",
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : "NeuralNexus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }

    from(["README.md", "LICENSE"]) {
        into("META-INF")
    }
    from {
        bundleJars(platformVersions)
    }
}

tasks.register("customDowngrade", DowngradeJar) {
    inputFile = tasks.shadeAndRelocate.archiveFile
    downgradeTo = JavaVersion.VERSION_1_8
    classpath = sourceSets.main.compileClasspath
    archiveClassifier = "downgraded-8"
}

tasks.register("customShadeDowngradedApi", ShadeJar) {
    inputFile = tasks.customDowngrade.archiveFile
    archiveFileName = "pr-${version}.jar"
}

tasks.register("renameJar", Copy) {
    from(customShadeDowngradedApi.archiveFile)
    into(file("./build/libs"))
    rename { "playtimeranks-${version}.jar" }

    doLast {
        file("./build/libs/playtimeranks-${version}-mono.jar").delete()
        file("./build/libs/playtimeranks-${version}-downgraded-8.jar").delete()
        file("./build/libs/pr-${version}.jar").delete()
    }
}

tasks.shadeAndRelocate.dependsOn(buildAllTheStuffNowBcGradleIsDumb)
tasks.customDowngrade.dependsOn(shadeAndRelocate)
tasks.customShadeDowngradedApi.dependsOn(customDowngrade)
tasks.renameJar.dependsOn(customShadeDowngradedApi)
tasks.assemble.dependsOn(renameJar)
